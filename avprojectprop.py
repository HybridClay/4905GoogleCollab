# -*- coding: utf-8 -*-
"""AVprojectprop.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ce2B01dIz6NiRb3h-0-WCsY4_xqg9OLv

Data from:  https://archive.ics.uci.edu/ml/datasets/Early+stage+diabetes+risk+prediction+dataset.
"""

import pandas as pd
from pandas import DataFrame

diabetes = pd.read_csv("diabetes_data_upload.csv")

diabetes

diabetes.to_csv

diabetes_data = DataFrame(diabetes,columns= ['Age','Gender','sudden_weight_loss','weakness','visual_blurring','Itching','delayed_healing','muscle_stiffness','Obesity','result'] )
diabetes_data

print(diabetes_data.index)
print(diabetes_data.columns)

diabetes.shape

"""We have 520 rows and 10 columns."""

print(diabetes_data.size)

print(diabetes.Age)
print(diabetes.Gender)
print(diabetes.sudden_weight_loss)
print(diabetes.weakness)
print(diabetes.visual_blurring)
print(diabetes.Itching)
print(diabetes.delayed_healing)
print(diabetes.muscle_stiffness)
print(diabetes.Obesity)
print(diabetes.result)

print(diabetes_data.groupby('Age').size())

"""Here I get a list of the Age of people in the dataset where its from people 16-90 years old. I see that there is 1 person who is 16 years old and 2 who are 90 years old. I made a histogram for this data to see it."""

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
# %matplotlib inline

x=diabetes.Age
#print(x)

plt.hist(x,bins=25)
plt.show()

#bin=25 to look closer at this 23

"""Here I show the range of the ages of the people from this data.
maximum age was 90 and the minimum was 16, So i subtracted to give me the range=74(closer look in histogram,put 74 for bin=)
Number of intervals is radical 520(total rows of column Age) and bin=22.8=23 
And 74/23=3.2=3 put in bin=

"""

x= diabetes.Gender
plt.hist(x)
plt.show()

"""In this histogram, we see that there are more male than females in this study. Female=200 participants & Male = more than 300, so if there are 520 rows then 520-200(females)=320(Males)!

"""

print(diabetes.result)

"""As you can see in the above I wanted to know how many were positive and how many were negative in my diabetes result column."""

poscount = 0
for result in diabetes.result:
  if (result == 'Positive'):
    poscount = poscount+1
print(poscount)


negcount = 0
for result in diabetes.result:
  if(result == 'Negative'):
    negcount = negcount+1
print(negcount)

print('Total participants', poscount + negcount)

"""Here I was able to count the positive and negatives but i wanted to see it visually in a graph."""

import pandas as pd
from matplotlib import pyplot as plt

data= pd.read_csv("diabetes_data_upload.csv")
data.head()
df = pd.DataFrame(data)

result = df['result'].head(12)

fig, ax = plt.subplots(figsize =(16,9))

poscount = 0
for result in diabetes.result:
  if(result =='Positive'):
    poscount = poscount+1

negcount = 0
for result in diabetes.result:
  if(result =='Negative'):
    negcount = negcount+1

ax.barh('positive',poscount)   # enter the number of occurances in positive
ax.barh('negative',negcount)  #enter the value of number of occurances


for s in ['top', 'bottom', 'left', 'right']:
  ax.spines[s].set_visible(False)

ax.grid(b = True, color ='black',
        linestyle ='-.', linewidth = 0.5,
        alpha = 0.2)

ax.invert_yaxis()

for i in ax.patches:
  plt.text(i.get_width()+0.2, i.get_y()+0.5,
           str(round((i.get_width()),2)),
           fontsize = 10, fontweight = 'bold',
           color = 'black')
  
ax.set_title('From this study, we can see how many came out posotive vs negative',
             loc = 'left', )

plt.show()

"""Now we can see visually see the posotive and negative results from the data. 320 participants came out positive.
200 participants in the data/study were negative
"""

x = diabetes_data[diabetes.result == 'Positive'].Gender.value_counts()
print('Number of positive results:')
print(x)

y= diabetes_data[diabetes.result == 'Negative'].Gender.value_counts()
print('Number of negative results:')
print(y)

x = diabetes_data[diabetes.result == 'Positive'].Gender.value_counts(normalize=True)
print('Percentages of positive results:\n',x)

y= diabetes_data[diabetes.result == 'Negative'].Gender.value_counts(normalize=True)
print('Percentages of negative results:\n', y)

diabetes_data.groupby('Gender').result.value_counts()

"""The number of positive and negative results in gender in one line of code."""

diabetes_data.groupby('Gender').result.value_counts(normalize=True)

diabetes_data.groupby('Gender').result.value_counts(normalize=True)*100

"""The percentages of positive and negative results in gender in one line of code."""

from matplotlib import pyplot as plt
import numpy as np

gender = ['Male','Female']

x = diabetes_data[diabetes.result == 'Positive'].Gender.value_counts()
#x = diabetes_data[diabetes.result == 'Positive'].Gender.value_counts(normalize=True)

fig=plt.figure(figsize=(10,7))
plt.pie(x,labels=gender, autopct='%1.1f%%', shadow=True,startangle=140)
#plt.pie(x,labels=gender)

print('POSITIVE RESULTS IN DATASET:')

plt.show

from matplotlib import pyplot as plt
import numpy as np

gender = ['Male','Female']

y= diabetes_data[diabetes.result == 'Negative'].Gender.value_counts()
#y= diabetes_data[diabetes.result == 'Negative'].Gender.value_counts(normalize=True)

fig = plt.figure(figsize =(10,7))
plt.pie(y,labels=gender, autopct='%1.1f%%', shadow=True,startangle=140)
#plt.pie(y,labels=gender)

print('NEGATIVE RESULTS IN DATASET:')

plt.show

import numpy as np
import matplotlib.pyplot as plt 

gender=['Male\n(Negative)','Female\n(Negative)','Female\n(Positive)','Male\n(Positive)']
result=diabetes_data.groupby('Gender').result.value_counts(normalize=True)
#result= diabetes_data.groupby('Gender').result.value_counts()

fig = plt.figure(figsize =(10,7))
plt.pie(result,labels=gender, autopct='%1.1f%%', shadow=True,startangle=140)

plt.axis('equal')

plt.show

"""Male negative = 181
Female positive = 173
Male positive = 147
Female negative = 19
                 ----
                 520

"""

#from sklearn import tree
#Decision tree
import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn import metrics

col_names = ['sudden_weight_loss','weakness','visual_blurring','Itching','delayed_healing','muscle_stiffness','Obesity','result']
diabete = pd.read_csv("diabetes_dt.csv", header=None, names=col_names)

diabete.head()

"""0 = no
1 = yes
"""

diabete

feature_cols = ['sudden_weight_loss','weakness','visual_blurring','Itching','delayed_healing','muscle_stiffness','Obesity']
x= diabete[feature_cols]
y= diabete.result

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=1)

clf = DecisionTreeClassifier()

clf = clf.fit(x_train,y_train)


y_pred = clf.predict(x_test)

print("Accuracy:",metrics.accuracy_score(y_test, y_pred))

"""The accuracy is 81.4%"""

from sklearn.tree import export_graphviz
from sklearn.externals.six import StringIO
from IPython.display import Image
import pydotplus

dot_data = StringIO()
export_graphviz(clf, out_file=dot_data,
                filled=True, rounded=True,
                special_characters=True,feature_names = feature_cols,class_names=['0','1'])
graph = pydotplus.graph_from_dot_data(dot_data.getvalue())
graph.write_png('diabete.png')
Image(graph.create_png())

testData = [[0,0,0,0,0,0,0,'Posotive'],
           [0,1,0,1,0,1,0,'Negative'],
           [0,0,0,1,0,0,0,'Posotive'],
           [1,1,1,1,1,1,1,'Posotive']]
testData = pd.DataFrame(testData, columns=col_names)

testData

testY = testData['result']
testX = testData.drop(['result'],axis =1)

predY = clf.predict(testX)
predY

"""As we can see in the above, when the test data was inserted into the datafram to predict if its correct,
the first row where its all 0(no's) and i put posotive but in the prediction of the test data we get negative as it should. 
In the last row its all 1(yes) so it should predict posotive and it stayed that way in the prediction.

(lets focus on these two rows only because the ones in between are probably missing their other attributes columns, that make it into posotive or negative)
"""

from sklearn.metrics import accuracy_score

print('Accuracy on test data is %.2f' % (accuracy_score(testY, predY)))
#print("Accuracy:",metrics.accuracy_score(testY, predY))